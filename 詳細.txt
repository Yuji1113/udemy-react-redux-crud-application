JSXの利点
アプリケーションの内部で
JSXはトランスパイルされJSコードに変換されている。
JSXはそのままでは実行できない（ブラウザで実行できない）
トランスパイル（JSXー>Javascriptに変換）はBabelが行っている

JSXは直感的に記述できるため
最終的な成果物の形式に近い状態で書ける。


Propsはイミュータブル
Stateはミュータブル

StateはClassコンポーネントで利用できる
Stateの変更はsetStateが必須：Do not mutate state directly. Use setState()
setStateで自動的にrender()が実行され再描画されるので明示的に描画処理が不要


REDUX
リダックスはFLUXアーキテクチャのひとつ。

REDUXのモチベーションは
コンポーネントの階層が大きくなった時に
簡単に共有できる

コンベンション：
REDUXアプリケーションコーディングの習慣。
覚えることが多いが慣れてしまえば
他プロジェクトのソースコードリーディングが早くなる
リーダブルなコードが書けるようになる。

action
アプリの中で何が起きたかを示すファイル
./src/actions/index.js
actionは
JSのオブジェクト
typeというキーと値（ユニーク）を持つ


actionCreator:actionを返す関数（exportしておく）

複数の場所で利用されるデータは
一箇所で定義するのがプログラミングの鉄則


リデューサー：
actionが発生した時に、actionのTYPEに応じて
状態（state）をどのように変化させるのかを定義する物

index.js
アプリ内の全reducerを統括

count.js
stateの初期値をオブジェクトとして定義
初期状態のstateはinitialState



//REDUX実践
登場人物
ークライアント（ブラウザ）
ー静的サーバー（FireBase）
ーAPIサーバー（Heroku）

イベント管理アプリケーション
CRUD（クラッド）
Create
Read
Update
Delete


・APIサーバーの挙動

全て取得
curl --request GET --url \
'https://udemy-utils.herokuapp.com/api/v1/events?token=token123'


1番のみ
curl --request GET --url \
'https://udemy-utils.herokuapp.com/api/v1/events/1?token=token123'

データを作成（POST Request）
curl --request POST \
--url 'https://udemy-utils.herokuapp.com/api/v1/events?token=token123' \
--header 'Content-Type: application/json' \
--data '{
  "title":"event 11",
  "body":"body for event 11"
}'

更新
curl --request PUT \
--url 'https://udemy-utils.herokuapp.com/api/v1/events/1?token=token123' \
--header 'Content-Type: application/json' \
--data '{
  "title":"change title",
  "body":"change body"
}'

削除
curl --request DELETE \
--url 'https://udemy-utils.herokuapp.com/api/v1/events/1?token=token123' \
--header 'Content-Type: application/json' \


・外部APIサーバーにhtmlリクエストを送るための便利なライブラリ
yarn add axios

・reduxのaction-creator非同期処理を実装するためのライブラリ
yarn add redux-thunk

//非同期処理を行いたいが
//ピュアなオブジェクトを返す必要がある
//redux-thunkを利用する
//actionの代わりに関数を返すことができる


//
evens.js

// [
//   {"id":1,"title":"Let's have an event 1!","body":"This is the body for event 1."},
//   {"id":2,"title":"Let's have an event 2!","body":"This is the body for event 2."}
// ]
// 下記に変換する方がアクセシビリティが良くなる
// lodashを利用する
// {
//   1:{"title":"Let's have an event 1!","body":"This is the body for event 1."},
//   2:{"title":"Let's have an event 2!","body":"This is the body for event 2."}
// }


//画面遷移のリンク機能
yarn add react-router-dom

//フォーム
yarn add redux-form


//リンク実装
//デバックしやすくするツール
yarn add redux-devtools-extension
